// app/api/upload/route.ts

export const config = {
  api: {
    bodyParser: {
      sizeLimit: '25mb',
    },
  },
};

import { NextResponse } from 'next/server';
import sharp from 'sharp';
import ExifReader from 'exifreader';
import Report from '@/app/models/ReportModel';
import User from '@/app/models/UserModel';
import TaskModel from '@/app/models/TaskModel';
import { currentUser } from '@clerk/nextjs/server';
import dbConnect from '@/utils/mongoose';
import { uploadBufferToS3 } from '@/utils/s3';
import { v4 as uuidv4 } from 'uuid';
import Busboy from 'busboy';
import { Readable } from 'stream';
import type { ReadableStream as NodeWebStream } from 'stream/web';
import { sendEmail } from '@/utils/mailer';

export const dynamic = 'force-dynamic';

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç D¬∞ M' S" + N/S/E/W
 */
function toDMS(
  degrees: number,
  minutes: number,
  seconds: number,
  isLatitude: boolean
): string {
  const direction = isLatitude
    ? degrees >= 0
      ? 'N'
      : 'S'
    : degrees >= 0
    ? 'E'
    : 'W';
  const absDeg = Math.abs(degrees);
  return `${absDeg}¬∞ ${minutes}' ${seconds.toFixed(2)}" ${direction}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ EXIF –≤ DD.MM.YYYY
 */
function formatDateToDDMMYYYY(exifDateStr: string): string {
  const [datePart] = exifDateStr.split(' ');
  const [yyyy, mm, dd] = datePart.split(':');
  return `${dd}.${mm}.${yyyy}`;
}

export async function POST(request: Request) {
  console.log('>>>> /api/upload called', new Date().toISOString());
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const user = await currentUser();
  if (!user) {
    console.error('Authentication error: User is not authenticated');
    return NextResponse.json(
      { error: 'User is not authenticated' },
      { status: 401 }
    );
  }

  const name = `${user.firstName || 'Unknown'} ${user.lastName || ''}`.trim();

  // –ü–æ—Ç–æ–∫–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
  const fields: Record<string, string> = {};
  const fileBuffers: Buffer[] = [];

  const bb = Busboy({ headers: Object.fromEntries(request.headers) });

  bb.on('field', (name, val) => (fields[name] = val));

  bb.on('file', (_field, stream) => {
    const chunks: Buffer[] = [];
    stream.on('data', (c) => chunks.push(c));
    stream.on('end', () => fileBuffers.push(Buffer.concat(chunks)));
  });

  await new Promise<void>((res, rej) => {
    bb.on('finish', res);
    bb.on('error', rej);

    const nodeStream = Readable.fromWeb(
        request.body as unknown as NodeWebStream
    );
    nodeStream.pipe(bb);
  });



  // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ task/baseId
  const rawBaseId = fields.baseId;
  const rawTask   = fields.task;
  const taskId    = fields.taskId ?? 'unknown';

  if (!rawBaseId || !rawTask) {
    console.error('Validation error: Base ID or Task is missing');
    return NextResponse.json(
      { error: 'Base ID or Task is missing' },
      { status: 400 }
    );
  }

  // –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
  const baseId = decodeURIComponent(rawBaseId).trim();
  const task = decodeURIComponent(rawTask).trim();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ initiatorId –∏–∑ FormData
  const initiatorIdFromForm = fields.initiatorId ?? null;
  let initiatorId = 'unknown';
  let initiatorName = 'unknown';

  if (initiatorId === 'unknown') {
    initiatorId  = fields.initiatorId  ?? 'unknown';
    initiatorName = fields.initiatorName ?? 'unknown';
  }


  try {
    if (initiatorIdFromForm) {
      await dbConnect();
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ clerkUserId
      const initiatorUser = await User.findOne({
        clerkUserId: initiatorIdFromForm,
      });
      if (initiatorUser) {
        initiatorId = initiatorUser.clerkUserId;
        initiatorName = initiatorUser.name;
      } else {
        console.warn('Initiator user not found in database');
      }
    }
  } catch (error) {
    console.error('Error fetching initiator user:', error);
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ URL –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ
  if (initiatorId === 'unknown') {
    initiatorId = fields.initiatorId || 'unknown'
    initiatorName = fields.initiatorName || 'unknown'
  }

  // –§–∞–π–ª—ã
  if (fileBuffers.length === 0) {
    console.error('Validation error: No files uploaded');
    return NextResponse.json({ error: 'No files uploaded' }, { status: 400 });
  }

  // –ú–∞—Å—Å–∏–≤ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
  const fileUrls: string[] = [];

  for (const buffer of fileBuffers) {

    let date = 'Unknown Date';
    let coordinates = 'Unknown Location';

    // –ß—Ç–µ–Ω–∏–µ EXIF
    try {
      const tags = ExifReader.load(buffer);
      if (tags.DateTimeOriginal?.description) {
        const exifDate = tags.DateTimeOriginal.description;
        date = formatDateToDDMMYYYY(exifDate);
      }

      const latitude = tags.GPSLatitude?.value as
        | [[number, number], [number, number], [number, number]]
        | undefined;
      const longitude = tags.GPSLongitude?.value as
        | [[number, number], [number, number], [number, number]]
        | undefined;

      if (latitude && longitude) {
        const latDeg = latitude[0][0];
        const latMin = latitude[1][0];
        const latSec = latitude[2][0] / 100;

        const lonDeg = longitude[0][0];
        const lonMin = longitude[1][0];
        const lonSec = longitude[2][0] / 100;

        const latDMS = toDMS(latDeg, latMin, latSec, true);
        const lonDMS = toDMS(lonDeg, lonMin, lonSec, false);

        coordinates = `${latDMS} | ${lonDMS}`;
      }
    } catch (error) {
      console.warn('Error reading Exif data:', error);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è S3
    const uniqueId = uuidv4();
    const outputFilename = `${baseId}-${uniqueId}.jpg`;

    try {

// 1) –ü–æ–≤–æ—Ä–æ—Ç + —Ä–µ—Å–∞–π–∑ ‚ûú –ø–æ–ª—É—á–∞–µ–º buffer –ò —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞
      const { data: resizedBuffer, info } = await sharp(buffer)
          .rotate()
          .resize(1920, 1920, {
            fit: sharp.fit.inside,
            withoutEnlargement: true,
          })
          .toBuffer({ resolveWithObject: true });   // ‚Üê info.width / info.height

// 2) SVG-–æ–≤–µ—Ä–ª–µ–π —Ä–æ–≤–Ω–æ –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —à–∏—Ä–∏–Ω–µ
      const overlayHeight = 80;
      const overlaySvg = `
  <svg width="${info.width}" height="${overlayHeight}">
    <rect width="100%" height="100%" fill="black" opacity="0.6"/>
    <text x="20" y="30" font-size="24" font-family="Arial" fill="white">
      ${date} | Task: ${task} | BS: ${baseId}
    </text>
    <text x="20" y="60" font-size="24" font-family="Arial" fill="white">
      Location: ${coordinates} | Executor: ${name}
    </text>
  </svg>`;

// 3) –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π JPEG
      const processedBuffer = await sharp(resizedBuffer)
          .composite([{ input: Buffer.from(overlaySvg), gravity: 'south' }])
          .jpeg({ quality: 80 })
          .toBuffer();

// üîÑ--- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê -------------------------------------------------



      // 2) –§–æ—Ä–º–∏—Ä—É–µ–º "–∫–ª—é—á" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ S3 (–ø–∞–ø–∫–∞ reports/{task}/{baseId}/)
      const s3Key = `reports/${task}/${baseId}/${outputFilename}`;

      // 3) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
      const fileUrl = await uploadBufferToS3(
        processedBuffer,
        s3Key,
        'image/jpeg'
      );

      fileUrls.push(fileUrl);
    } catch (error) {
      console.error('Error processing or uploading image:', error);
      return NextResponse.json(
        { error: 'Error processing one or more images' },
        { status: 500 }
      );
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  try {
    await dbConnect(); // —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    // === –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á—ë—Ç –¥–ª—è (reportId, task, baseId) ===
    let report = await Report.findOne({
      reportId: taskId || 'unknown',
      task,
      baseId,
    });

    if (report) {
      // –ï—Å–ª–∏ –æ—Ç—á—ë—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ
      report.files.push(...fileUrls);

      report.events.push({
        action: 'REPORT_UPDATED',
        author: name,
        authorId: user.id,
        date: new Date(),
        details: {
          newFiles: fileUrls.length,
          comment: 'Additional photos uploaded',
        },
      });

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "Pending" –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π
      report.status = 'Pending';

      await report.save();
      console.log('Report updated (appended files) successfully.');
    } else {
      // –ï—Å–ª–∏ –æ—Ç—á—ë—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
      report = new Report({
        reportId: taskId || 'unknown',
        task,
        baseId,
        executorId: user.id,
        executorName: name,
        initiatorId,
        initiatorName,
        userAvatar: user.imageUrl || '',
        createdAt: new Date(),
        status: 'Pending',
        files: fileUrls,
      });

      report.events.push({
        action: 'REPORT_CREATED',
        author: name,
        authorId: user.id,
        date: new Date(),
        details: {
          fileCount: fileUrls.length,
        },
      });

      await report.save();
      console.log('Report saved to database successfully.');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (–ø–æ reportId)
    const relatedTask = await TaskModel.findOne({ taskId: report.reportId });
    if (relatedTask) {
      const oldStatus = relatedTask.status;
      relatedTask.status = 'Pending';
      relatedTask.events.push({
        action: 'STATUS_CHANGED',
        author: name,
        authorId: user.id,
        date: new Date(),
        details: {
          oldStatus,
          newStatus: 'Pending',
          comment: '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞',
        },
      });
      await relatedTask.save();
      console.log('–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ Pending');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try {
      const frontendUrl = process.env.FRONTEND_URL || 'https://ciwork.pro';
      const taskLink = `${frontendUrl}/tasks/${relatedTask.taskId}`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      const recipients = [
        relatedTask.authorEmail,
        // relatedTask.initiatorEmail,
        relatedTask.executorEmail,
        //'transport@t2.ru',
      ]
        .filter((email) => email && email !== '')
        .filter((value, index, self) => self.indexOf(value) === index);

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
      for (const email of recipients) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        let role = 'Participant';
        if (email === relatedTask.authorEmail) role = 'Author';
        else if (email === relatedTask.initiatorEmail) role = 'Initiator';
        else if (email === relatedTask.executorEmail) role = 'Executor';

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏
        let roleText = '';
        switch (role) {
          case 'Author':
            roleText = `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ –∫–∞–∫ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ "${relatedTask.taskName} ${relatedTask.bsNumber}" (${relatedTask.taskId}).`;
            break;
          case 'Initiator':
            roleText = `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ "${relatedTask.taskName} ${relatedTask.bsNumber}" (${relatedTask.taskId}).`;
            break;
          case 'Executor':
            roleText = `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ "${relatedTask.taskName} ${relatedTask.bsNumber}" (${relatedTask.taskId}).`;
            break;
          default:
            roleText = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ "${relatedTask.taskName} ${relatedTask.bsNumber}" (${relatedTask.taskId}).`;
        }

        // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        const mainContent = `
–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: Pending
–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${name}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç–∞
–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É: ${taskLink}
    `.trim();

        // HTML-–≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
        const fullHtml = `
<p>${roleText}</p>
<p>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ <strong>${relatedTask.taskId}</strong> –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <strong>Pending</strong></p>
<p>–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${name}</p>
<p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç–∞</p>
<p><a href="${taskLink}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ</a></p>
<p>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ ${relatedTask.taskId}, ${name} –¥–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.</p>
<p>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ <a href="${taskLink}">—Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–¥–∞—á–∏</a></p>
`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        await sendEmail({
          to: email,
          subject: `–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${relatedTask.taskName} ${relatedTask.bsNumber}" (${relatedTask.taskId}) –∏–∑–º–µ–Ω—ë–Ω`,
          text: `${roleText}\n\n${mainContent}`,
          html: fullHtml,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }

    return NextResponse.json({
      success: true,
      message: `Photo ${task} | Base ID: ${baseId} uploaded successfully`,
      paths: fileUrls,
    });
  } catch (error) {
    console.error('Error saving report to database:', error);
    return NextResponse.json(
      { error: 'Failed to save report' },
      { status: 500 }
    );
  }
}
